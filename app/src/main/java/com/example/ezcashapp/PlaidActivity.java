package com.example.ezcashapp;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.textfield.TextInputLayout;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.plaid.link.Plaid;
import com.plaid.link.configuration.LinkTokenConfiguration;
import com.plaid.link.configuration.PlaidProduct;
import com.plaid.link.result.PlaidLinkResultHandler;
import com.plaid.link.result.LinkSuccess;
import com.plaid.link.result.LinkExit;

import kotlin.Unit;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * NAME: PlaidActivity - The controller for the bank verification page in the application
 *
 * DESCRIPTION: This class allows user to select their bank and login with their credentials to verify their bank.
 *              The screen displayed to the user is made possible by plaid's android sdk integration as described here : https://github.com/plaid/plaid-link-android
 *
 * AUTHOR: Nitesh Parajuli
 *
 * DATE 8/1/2020
 *
 */


public class PlaidActivity extends AppCompatActivity {

    private String publicToken;
    private TextView result;
    private Retrofit mRetrofit;
    private RetroInterface mRetroInterface;
    private String BASE_URL = "http://172.18.105.36:3000";
    private String link_token;
    private String customerUrl;
    private DatabaseReference mPaymentsDatabase;
    private FirebaseUser mCurrentUser;

    private PlaidLinkResultHandler myPlaidResultHandler = new PlaidLinkResultHandler(
            linkSuccess -> {

                publicToken = linkSuccess.getPublicToken();
                LinkSuccess.LinkSuccessMetadata metadata = linkSuccess.getMetadata();
                String accountId = metadata.getAccounts().get(0).getAccountId();

                HashMap<String, String> map = new HashMap<>();
                map.put("publicToken", publicToken );
                map.put("accountId", accountId);

                Call<PlaidToken> call = mRetroInterface.getProcessorToken(map);
                call.enqueue(new Callback<PlaidToken>() {
                                 @Override
                                 public void onResponse(Call<PlaidToken> call, Response<PlaidToken> response) {

                                     if(response.code() == 200)
                                     {
                                         PlaidToken result = response.body();
                                         String processorToken = result.getprocessorToken();
                                         dwollaVerification(processorToken);


                                     }

                                 }

                                 @Override
                                 public void onFailure(Call<PlaidToken> call, Throwable t) {



                                 }
                             }

                );



                return Unit.INSTANCE;
            },
            linkExit -> {
                if (linkExit.error != null) {
                    result.setText(getString(
                            R.string.content_exit,
                            linkExit.error.getDisplayMessage(),
                            linkExit.error.getErrorCode()));
                } else {
                    result.setText(getString(
                            R.string.content_cancel,
                            linkExit.metadata.status != null ? linkExit.metadata.status.jsonValue : "unknown"));
                }
                return Unit.INSTANCE;
            }
    );


    /**
     *
     * NAME: PlaidActivity::dwollaVerification() - send the processor token to Dwolla's API to add the bank verified through plaid as a funding-source for a user.
     *
     * SYNOPSIS:  private void dwollaVerification(String processorToken)
     *           processorToken-> token generated by plaid after bank verification for Dwolla integration
     *
     * DESCRIPTION: This method is called when the user verifies his bank and Plaid returns a processor token for adding the user's bank with Dwolla. The verified
     *              bankUrl is saved in the database collection named payment_details.
     *
     * RETURNS: Nothing.
     *
     * AUTHOR: Nitesh Parajuli
     *
     * DATE 7/31/2020
     *
     */

    private void dwollaVerification(String processorToken) {

        final TextInputLayout accountName;
        Button add_bank;

        accountName = findViewById(R.id.bank_name);
        add_bank = findViewById(R.id.button_add_bank);

        add_bank.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ProgressDialog mProgress;
                mProgress = new ProgressDialog(PlaidActivity.this);
                mProgress.setTitle("Adding user's bank");
                mProgress.setMessage("Please wait while we save the changes");
                mProgress.show();

                HashMap<String, String> map = new HashMap<>();
                map.put("customerUrl", customerUrl);
                map.put("plaidToken", processorToken);
                map.put("name", accountName.getEditText().getText().toString());


                Call<DwollaBank> call = mRetroInterface.executeDwollaBankReg(map);

                call.enqueue(new Callback<DwollaBank>() {
                    @Override
                    public void onResponse(Call<DwollaBank> call, Response<DwollaBank> response) {

                        if(response.code() == 200)
                        {
                            final DwollaBank result = response.body();
                            final String bankUrl = result.getBankUrl();
                            mPaymentsDatabase.child("bankUrl").setValue(bankUrl).addOnCompleteListener(new OnCompleteListener<Void>() {
                                @Override
                                public void onComplete(@NonNull Task<Void> task) {
                                    if(task.isSuccessful()){
                                        mProgress.dismiss();
                                        Intent transaction = new Intent(PlaidActivity.this, TransactionsActivity.class);
                                        startActivity(transaction);

                                    }else{
                                        Toast.makeText(PlaidActivity.this,"Error in saving changes" ,Toast.LENGTH_LONG).show();
                                    }
                                }
                            });

                        }

                    }

                    @Override
                    public void onFailure(Call<DwollaBank> call, Throwable t) {

                        Toast.makeText(PlaidActivity.this,t.getMessage(),Toast.LENGTH_LONG).show();

                    }
                });
            }
        });


    }

    /**
     *
     * NAME: PlaidActivity::onCreate() - Initializes member variables of the class
     *
     * SYNOPSIS: protected void onCreate(Bundle savedInstanceState)
     *           savedInstanceState: State where application was left off previously
     *
     * DESCRIPTION: This method is called when Plaid activity is first called or launched.
     *              It initializes all member variables, such as database references, RecyclerView, Toolbar, and the bank verification screen
     *              It is responsible to create the PlaidActivity.
     *              It also handles the toolbar buttons, and send message button, bank verification, and Dwolla integration with Plaid.
     *
     * RETURNS: Nothing.
     *
     * AUTHOR: Nitesh Parajuli
     *
     * DATE 8/1/2020
     *
     */

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        mCurrentUser = FirebaseAuth.getInstance().getCurrentUser();
        String uid = mCurrentUser.getUid();
        mPaymentsDatabase = FirebaseDatabase.getInstance().getReference().child("payment_details").child(uid);
        link_token  = getIntent().getStringExtra("link_token");
        customerUrl = getIntent().getStringExtra("customerUrl");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_bank_info);
        result = findViewById(R.id.result);

        mRetrofit = new Retrofit.Builder().baseUrl(BASE_URL).addConverterFactory(GsonConverterFactory.create()).build();

        mRetroInterface = mRetrofit.create(RetroInterface.class);

        openLink();


    }

    /**
     *
     * NAME: PlaidActivity::openLink() - Initialize and handles the link integration functionality of Plaid
     *
     * SYNOPSIS: private void openLink()
     *
     * DESCRIPTION: This method allows to verify the bank account using link_token which is returned from a POST request made to backend nodeJS server.
     *              The link_token is a temporary token which expires after certain time interval.
     *
     * RETURNS: Nothing.
     *
     * AUTHOR: Nitesh Parajuli
     *
     * DATE 8/1/2020
     *
     */
    private void openLink() {
        ArrayList<PlaidProduct> products = new ArrayList<>();
        products.add(PlaidProduct.AUTH);
        Plaid.openLink(PlaidActivity.this, new LinkTokenConfiguration.Builder()
                .token(link_token)
                .build()
                .toLinkConfiguration());


    }


    /**
     *
     * NAME: PlaidActivity:onActivityResult() - allows user to add bank information and opens the PlaidActivity screen.
     *
     * SYNOPSIS: protected void onActivityResult(int requestCode, int resultCode, Intent data)
     *           requestCode ->  The integer request code originally supplied to startActivityForResult() through Plaid's SDK allowing the application to identify
     *           where this result came from.
     *           resultCode -> The integer result code returned by the child activity through its setResult().
     *           data -> Intent which can return result data to the caller
     *
     * DESCRIPTION: This method is called internally through Plaid when the linkSuccess callback in Plaid result handler is called.
     *              It opens the Plaid Screen and allows the user to input their bank information, while staying inside the application.
     *
     * RETURNS: Nothing.
     *
     * AUTHOR: Nitesh Parajuli
     *
     * DATE 8/1/2020
     *
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (!myPlaidResultHandler.onActivityResult(requestCode, resultCode, data)) {
            Log.i(PlaidActivity.class.getSimpleName(), "Not handled");
        }
    }

    /**
     *
     * NAME: ChatActivity::onCreateOptionsMenu() - inflates the plaid menu
     *
     * SYNOPSIS:  public boolean onCreateOptionsMenu(Menu menu)
     *            menu -> Plaid menu displayed to the user
     *
     * DESCRIPTION: This method inflates the Plaid menu with menu items.
     *
     * RETURNS: True after successfully inflating the menu.
     *
     * AUTHOR: Nitesh Parajuli
     *
     * DATE 8/1/2020
     *
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_java, menu);
        return true;
    }

    /**
     *
     * NAME: PlaidActivity::onOptionsItemSelected() - handles the menu options
     *
     * SYNOPSIS:    public boolean onOptionsItemSelected(MenuItem item)
     *              item  -> menu item selected by the user
     *
     *
     * DESCRIPTION: This method handles all Plaid menu options and directs the user to next screen based on what they select.
     *
     * RETURNS: True after successfully handling a menu item
     *
     * AUTHOR: Nitesh Parajuli
     *
     * DATE 7/31/2020
     *
     */
    @SuppressWarnings("SwitchStatementWithTooFewBranches")
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        switch (item.getItemId()) {
            case R.id.show_kotlin:
                Intent intent = new Intent(this, PlaidActivity.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                startActivity(intent);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }


}




